Index: src/main/java/ca/uhn/fhir/jpa/starter/PatientAndAdminAuthorizationInterceptor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.uhn.fhir.jpa.starter;\n\nimport ca.uhn.fhir.context.FhirContext;\nimport ca.uhn.fhir.rest.api.server.RequestDetails;\nimport ca.uhn.fhir.rest.client.api.IGenericClient;\nimport ca.uhn.fhir.rest.client.interceptor.BearerTokenAuthInterceptor;\nimport ca.uhn.fhir.rest.server.exceptions.AuthenticationException;\nimport ca.uhn.fhir.rest.server.interceptor.auth.AuthorizationInterceptor;\nimport ca.uhn.fhir.rest.server.interceptor.auth.IAuthRule;\nimport ca.uhn.fhir.rest.server.interceptor.auth.RuleBuilder;\nimport org.hl7.fhir.r4.model.IdType;\nimport org.hl7.fhir.r4.model.Patient;\nimport org.hl7.fhir.r4.model.Practitioner;\n\nimport java.util.List;\n\n@SuppressWarnings(\"ConstantConditions\")\npublic class PatientAndAdminAuthorizationInterceptor extends AuthorizationInterceptor {\n\n\n    @Override\n    public List<IAuthRule> buildRuleList(RequestDetails theRequestDetails) {\n        // Process authorization header - The following is a fake\n        // implementation. Obviously we'd want something more real\n        // for a production scenario.\n        //\n        // In this basic example we have two hardcoded bearer tokens,\n        // one which is for a user that has access to one patient, and\n        // another that has full access.\n        String authHeader = theRequestDetails.getHeader(\"Authorization\");\n        boolean userIsAdmin = false;\n        boolean userIsPractitioner = false;\n        boolean userIsOrganization = false;\n\n        IdType userIdPatientId = null;\n        IdType userId = null;\n        if (\"Bearer 39ff939jgg\".equals(authHeader)) {\n            // This user has access to everything\n            userIsAdmin = true;\n        }\n        else {\n            String id = theRequestDetails.getId().toString();\n            String patientId = id.substring(id.indexOf('/') + 1);\n\n            FhirContext ctx = FhirContext.forR4();\n            IGenericClient client = ctx.newRestfulGenericClient(\"http://localhost:8080/fhir/\");\n            BearerTokenAuthInterceptor authInterceptor = new BearerTokenAuthInterceptor(\"39ff939jgg\");\n            client.registerInterceptor(authInterceptor);\n\n            Patient patient = client.read().resource(Patient.class).withId(patientId).execute();\n\n            String resourceType_Client = null;\n            String resourceType_Bearer = null;\n\n            resourceType_Client = String.valueOf(patient.getResourceType()); //Revisar\n\n\n            if(resourceType_Client.equals(\"Patient\")){\n\n                if ((\"Bearer \" + patientId).equals(authHeader)) {\n                    // This user has access only to Patient/1 resources\n                    userIdPatientId = new IdType(\"Patient\", patientId);\n                    return new RuleBuilder()\n                            .allow().read().allResources().inCompartment(\"Patient\", userIdPatientId).andThen()\n                            .allow().write().allResources().inCompartment(\"Patient\", userIdPatientId).andThen()\n                            .denyAll()\n                            .build();\n                }else{\n                    // Throw an HTTP 401\n                    return new RuleBuilder()\n                            .denyAll()\n                            .build();\n\n                }\n            }else if (resourceType_Client.equals(\"Practitioner\")){\n                userId = new IdType(\"Patient\", patientId);\n                userIsPractitioner = true;\n                if ((\"Bearer \" + patient.getGeneralPractitionerFirstRep()).equals(authHeader)) {\n                    return new RuleBuilder()\n                            .allow().read().resourcesOfType(\"Patient\").inCompartment(\"Patient\", new IdType(patientId)).andThen()\n                            .allow().read().resourcesOfType(\"Observation\").inCompartment(\"Patient\", new IdType(patientId)).andThen()\n                            .denyAll()\n                            .build();\n\n                }else{\n                    return new RuleBuilder()\n                            .allow().read().resourcesOfType(\"Patient\").inCompartment(\"Patient\", new IdType(patientId)).andThen()                            .denyAll()\n                            .build();\n                }\n\n            }else if (resourceType_Client.equals(\"Organization\")){\n                userId = new IdType(\"Patient\", patientId);\n                userIsOrganization = true;\n                if ((\"Bearer \" + patient.getManagingOrganization()).equals(authHeader)) {\n                    return new RuleBuilder()\n                            .allow().read().resourcesOfType(\"Patient\").inCompartment(\"Patient\", new IdType(patientId)).andThen()\n                            .allow().read().resourcesOfType(\"Observation\").inCompartment(\"Patient\", new IdType(patientId)).andThen()\n                            .denyAll()\n                            .build();\n\n                }else{\n                    return new RuleBuilder()\n                            .denyAll()\n                            .build();\n                }\n\n            }else{\n                // Throw an HTTP 401\n                throw new AuthenticationException( \"Missing or invalid Authorization header value \" + patient.getId());\n                \n            }\n        }\n\n        // If the user is a specific patient, we create the following rule chain:\n        // Allow the user to read anything in their own patient compartment\n        // Allow the user to write anything in their own patient compartment\n        // If a client request doesn't pass either of the above, deny it\n\n        /*\n\n        if (userIdPatientId != null) {\n            return new RuleBuilder()\n                    .allow().read().allResources().inCompartment(\"Patient\", userIdPatientId).andThen()\n                    .allow().write().allResources().inCompartment(\"Patient\", userIdPatientId).andThen()\n                    .denyAll()\n                    .build();\n        }\n\n        if (userIsPractitioner) {\n\n        }\n\n        if (userIsOrganization) {\n            return new RuleBuilder()\n                    .allow().read().allResources().inCompartment(\"Patient\", userIdPatientId).andThen()\n                    .allow().write().allResources().inCompartment(\"Patient\", userIdPatientId).andThen()\n                    .denyAll()\n                    .build();\n        }\n\n        // If the user is an admin, allow everything\n        if (userIsAdmin) {\n            return new RuleBuilder()\n                    .allowAll()\n                    .build();\n        }\n*/\n        // By default, deny everything. This should never get hit, but it's\n        // good to be defensive\n        return new RuleBuilder()\n                .denyAll()\n                .build();\n\n\n    }\n}\n\n/*\n*     AuthorizationInterceptor authInterceptor = new AuthorizationInterceptor(){\n      @Override\n      public List<IAuthRule> buildRuleList(RequestDetails theRequestDetails) {\n        return new RuleBuilder()\n          .allow().read().resourcesOfType(\"Patient\").inCompartment(\"Patient\", new IdType(\"Patient/A\")).andThen()\n          .allow().read().resourcesOfType(\"Observation\").inCompartment(\"Patient\", new IdType(\"Patient/A\")).andThen()\n          .denyAll().andThen()\n          .build();\n      }\n    };\n    registerInterceptor(authInterceptor);\n*\n*\n* */
===================================================================
diff --git a/src/main/java/ca/uhn/fhir/jpa/starter/PatientAndAdminAuthorizationInterceptor.java b/src/main/java/ca/uhn/fhir/jpa/starter/PatientAndAdminAuthorizationInterceptor.java
--- a/src/main/java/ca/uhn/fhir/jpa/starter/PatientAndAdminAuthorizationInterceptor.java	
+++ b/src/main/java/ca/uhn/fhir/jpa/starter/PatientAndAdminAuthorizationInterceptor.java	
@@ -107,7 +107,7 @@
             }else{
                 // Throw an HTTP 401
                 throw new AuthenticationException( "Missing or invalid Authorization header value " + patient.getId());
-                
+
             }
         }
 
